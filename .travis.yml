---
language: python # (Ansible)

sudo: required

services:
  - docker

branches:
  only:
    - master

env:
  global:
    # Software versions
    - TERRAFORM_VERSION=0.11.8
    - YAMLLINT_VERSION=1.8.1
    # OpenStack environment
    - OS_AUTH_URL=https://pouta.csc.fi:5001/v3
    - OS_PROJECT_ID=glenna
    - OS_PROJECT_NAME="glenna"
    - OS_USER_DOMAIN_NAME="Default"
    - OS_USERNAME="marca"
    - OS_REGION_NAME="regionOne"
    - OS_IDENTITY_API_VERSION=3
    - secure: >
        w8qswIxwOi80CJ1RHSqBg3OoX4F0xAcWede/LWMDUxwlnFJmIVtpZSacpRdHBK/
        2ekMHSDln5LDjUpWL/50h8/DsBQ53BYv6VjRJGlkjouKX2GriEWz97KMKmcxP9d
        7kX1V3AGBvMh+4h3xs1sclff/ENrgr2tuZxJn7CN8VWuAbesclavDq12fM12wIQ
        ea73k7q2WVtisp0dLqbeg724ikY39ZaAzVGNxiG2dt2L7AGRAsPZXfMS7yv3uyT
        sDXEK36OjKy0devHxQRxv+J4EsaApGBG9uEx+h6D4TKg4tTwmHMB/jyTHfKKLgQ
        2umGBMrwknuz9HJgAkwAdmTESGC3/d7mdnSMyodDes5GliaEb0cBbDyLshLkCfH
        K4ZNPkpaB/8vseRNFWMnfr/yupJO3dE2pktDz4dMhMREr8QFUsgvwc7UVHtaeKK
        zMvDrMEaeuI5wB9T0YGnXe8ea7kkPGVULMb7JRoK5dmbIOI0bGNgTlwUW32sbq3
        vPAHb+tfD94GiGiWz/GKZQjmnwiYzlyf4w6EYhnLe3aMw1rbNfVb8njX6mXcOAB
        5ddT3srU/V7nFXv5+qDOiiP0PeirA8rhblErpEE/7tzrU6VFJjff7+tcn+ubH04
        K7xOg2PNzAuzNHMTz7Io+9nEYTc072o6Gtmp4apCzvKw0l9mdl61Y=
    # Test cluster configuration
    - TF_VAR_public_key=ssh_key.pub
    - TF_VAR_external_net_uuid=26f9344a-2e81-4ef5-a018-7d20cff891ee
    - TF_VAR_floating_ip_pool=public
    - TF_VAR_coreos_image_name=Container-Linux-1967.3.0
    - TF_VAR_master_flavor_name=standard.large
    - TF_VAR_worker_flavor_name=standard.large
    - TF_VAR_workers_count=1
    - TF_VAR_cluster_prefix=spark-ci-$TRAVIS_BUILD_NUMBER
    - TF_VAR_worker_volume_size=10

install:
  # Pull deps
  - docker pull "hashicorp/terraform:$TERRAFORM_VERSION"
  - docker pull "boiyaa/yamllint:$YAMLLINT_VERSION"
  # Generate SSH key
  - ssh-keygen -t rsa -N '' -f ssh_key

before_script:
  # Terraform init, validate, and format check
  - docker run -v "$PWD:/hostdir" -w /hostdir "hashicorp/terraform:$TERRAFORM_VERSION" init
  - docker run -v "$PWD:/hostdir" -w /hostdir --env-file <(env) "hashicorp/terraform:$TERRAFORM_VERSION" validate
  - docker run -v "$PWD:/hostdir" -w /hostdir "hashicorp/terraform:$TERRAFORM_VERSION" fmt -check=true -diff
  # Check scripts
  - git diff --exit-code
  # Check YAMLs
  - docker run -v "$PWD:/workdir" "boiyaa/yamllint:$YAMLLINT_VERSION" -c .yamllint.yml -s $(find . -type f -name '*.yml')

script:
  # Deploy
  - >
    docker run -v "$PWD:/hostdir" -w /hostdir --env-file <(env) "hashicorp/terraform:$TERRAFORM_VERSION"
    apply -auto-approve
  # Open tunnels
  - >
    master_ip=$(docker run -v "$PWD:/hostdir" -w /hostdir "hashicorp/terraform:$TERRAFORM_VERSION"
    output master_public_ip)
  - eval "$(ssh-agent -s)"
  - ssh-add ssh_key
  - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -N -f -L 8888:localhost:8888 core@$master_ip
  - ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -N -f -L 9999:localhost:9999 core@$master_ip
  # Tests
  - sleep 60 # If cluster not ready in 1 minute consider failed
  - curl http://localhost:9999/healthz
  - curl -L http://localhost:9999 |
    grep "<li><strong>Alive Workers:</strong> $TF_VAR_workers_count</li>"
  - curl http://localhost:8888/api/interpreter
  - >
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no core@$master_ip
    "docker exec hdfs-namenode hdfs dfsadmin -Dfs.defaultFS=hdfs://${TF_VAR_cluster_prefix}-master-000 -report" |
    grep "Live datanodes ($TF_VAR_workers_count)"
after_script:
  # Destroy
  - >
    docker run -v "$PWD:/hostdir" -w /hostdir --env-file <(env) "hashicorp/terraform:$TERRAFORM_VERSION"
    destroy -force
